<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title><%= siteTitle %></title> <%# Still uses locals %>
    <link href="/css/output.css" rel="stylesheet">
    <style>
        #content { transition: opacity 0.3s ease-in-out; }
        #content.loading { opacity: 0.5; }
        #userStatus { min-height: 1.25rem; } /* Prevent layout shift */
    </style>
</head>
<body class="bg-gray-200">
<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4"><%= siteTitle %></h1>

    <div id="userStatus" class="mb-2 text-sm text-gray-600">
        <% if (currentUser) { %> <%# localsMiddleware still provides this based on simulation %>
        Welcome, <span class="font-semibold"><%= currentUser.username %></span>!
        <% } else { %>
            You are not logged in.
        <% } %>
    </div>

    <nav class="mb-4 space-x-2">
        <button onclick="loadPartial('/home', '/partials/home')" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Home</button>
        <button onclick="loadPartial('/profile', '/partials/profile')" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Profile</button> <%# Profile route still uses placeholder auth middleware %>
        <button onclick="loadPartial('/login', '/partials/login')" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Login View</button>
        <button onclick="loadPartial('/register', '/partials/register')" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">Register</button>
    </nav>

    <div id="content" class="bg-white p-6 rounded shadow-md min-h-[200px]">
        <p>Loading initial content...</p>
    </div>
</div>

<script>
    const contentDiv = document.getElementById('content');
    const userStatusDiv = document.getElementById('userStatus');
    // Removed clientIsAuthenticated variable - will be handled by real auth later
    const siteTitleBase = <%- JSON.stringify(siteTitle) %>;

    const routeToPartialMap = {
        '/': '/partials/home',
        '/home': '/partials/home',
        '/profile': '/partials/profile',
        '/login': '/partials/login',
        '/register': '/partials/register' // Keep this if register partial exists
    };

    // --- Function to dynamically load and execute JS ---
    async function loadAndExecuteScript(scriptPath) {
        try {
            const response = await fetch(scriptPath);
            if (response.ok) {
                const scriptContent = await response.text();
                const scriptElement = document.createElement('script');
                scriptElement.textContent = scriptContent;
                // Append, execute, then remove
                document.body.appendChild(scriptElement);
                document.body.removeChild(scriptElement);
                console.log(`Successfully loaded and executed script: ${scriptPath}`);
            } else if (response.status === 404) {
                console.log(`No associated script found for partial at: ${scriptPath}`);
                // This is expected for partials without JS, so no error needed
            } else {
                console.error(`Error fetching script ${scriptPath}: ${response.status} ${response.statusText}`);
            }
        } catch (err) {
            console.error(`Network error loading script ${scriptPath}:`, err);
        }
    }
    // --- End new function ---


    async function loadPartial(browserUrl, fetchUrl, isPopState = false) {
        console.log(`Requesting state: ${browserUrl}, Fetching: ${fetchUrl}, IsPopState: ${isPopState}`);
        contentDiv.innerHTML = '<p class="text-gray-500">Loading...</p>';
        contentDiv.classList.add('loading');

        // TODO: Clean up placeholder auth logic if still present in middleware requires it
        // For now, assume placeholder auth checks query params if needed by middleware
        const effectiveFetchUrl = fetchUrl; // No client-side auth state modification

        try {
            const res = await fetch(effectiveFetchUrl); // Fetch the HTML partial

            if (res.ok) {
                const html = await res.text();
                contentDiv.innerHTML = html; // Inject HTML first
                console.log(`Successfully loaded partial HTML: ${fetchUrl}`);

                // --- NEW: Attempt to load corresponding JS ---
                // Convention: /partials/foo -> /js/partials/foo.js
                const partialName = fetchUrl.substring(fetchUrl.lastIndexOf('/') + 1);
                if (partialName) { // Ensure we have a name
                    const scriptPath = `/js/partials/${partialName}.js`;
                    await loadAndExecuteScript(scriptPath); // Load JS after HTML is in DOM
                }
                // --- End NEW ---


                const pageTitle = `${siteTitleBase} - ${browserUrl.substring(1) || 'Home'}`;
                document.title = pageTitle;

                if (!isPopState) {
                    const state = { fetchUrl: fetchUrl, browserUrl: browserUrl };
                    history.pushState(state, pageTitle, browserUrl);
                    console.log('Pushed state:', state);
                }
                // Removed clientIsAuthenticated update logic

            } else if (res.status === 401) { // Auth middleware check failed
                console.warn(`Authentication required for ${effectiveFetchUrl}. Loading login partial.`);
                // No clientIsAuthenticated to update now
                // updateUserStatusDisplay(); // Status display doesn't update dynamically now
                await loadPartial('/login', '/partials/login', isPopState); // Load login view

            } else { // Other errors (404, 500 etc)
                contentDiv.innerHTML = `<p class="text-red-500">Error loading content: ${res.status} ${res.statusText}</p>`;
                console.error(`Error loading partial ${effectiveFetchUrl}:`, res.status, res.statusText);
                document.title = `${siteTitleBase} - Error`;
            }
        } catch (err) {
            contentDiv.innerHTML = '<p class="text-red-500">Network error or server unavailable.</p>';
            console.error('Fetch error:', err);
            document.title = `${siteTitleBase} - Network Error`;
        } finally {
            contentDiv.classList.remove('loading');
        }
    }

    // Event Listeners (DOMContentLoaded, popstate) remain largely the same
    // The 'submit' event listener from Iteration 6 should be removed as
    // the logic will live in the specific partial JS files now.

    document.addEventListener('DOMContentLoaded', () => {
        const initialPath = window.location.pathname;
        const fetchUrl = routeToPartialMap[initialPath] || routeToPartialMap['/'];
        console.log(`Initial load path: ${initialPath}, mapped to fetch: ${fetchUrl}`);
        // updateUserStatusDisplay(); // No dynamic update for now
        loadPartial(initialPath, fetchUrl, true);
        const initialState = { fetchUrl: fetchUrl, browserUrl: initialPath };
        history.replaceState(initialState, document.title, initialPath);
        console.log('Replaced initial state:', initialState);
    });

    window.addEventListener('popstate', (event) => {
        console.log('Popstate event fired. State:', event.state);
        if (event.state && event.state.fetchUrl) {
            // updateUserStatusDisplay(); // No dynamic update for now
            loadPartial(event.state.browserUrl, event.state.fetchUrl, true);
        } else {
            console.log("Popstate event with null/invalid state, loading default.");
            // updateUserStatusDisplay(); // No dynamic update for now
            loadPartial('/home', '/partials/home', true);
        }
    });

</script>
</body>
</html>