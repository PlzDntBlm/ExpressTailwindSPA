<!DOCTYPE html>
<html>
<head>
    <title><%= siteTitle %></title>
    <link href="/css/output.css" rel="stylesheet">
    <style>
        #content { transition: opacity 0.3s ease-in-out; }
        #content.loading { opacity: 0.5; }
        #userStatus { min-height: 1.25rem; }
    </style>
</head>
<body class="bg-gray-200">
<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4"><%= siteTitle %></h1>
    <div id="userStatus" class="mb-2 text-sm text-gray-600">
        <% if (currentUser) { %> Welcome, <span class="font-semibold"><%= currentUser.username %></span>! <% } else { %> You are not logged in. <% } %>
    </div>
    <nav class="mb-4 space-x-2">
        <button onclick="loadPartial('/home', '/partials/home')" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Home</button>
        <button onclick="loadPartial('/profile', '/partials/profile')" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Profile</button>
        <button onclick="loadPartial('/login', '/partials/login')" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Login View</button>
        <button onclick="loadPartial('/register', '/partials/register')" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">Register</button>
    </nav>
    <div id="content" class="bg-white p-6 rounded shadow-md min-h-[200px]">
        <p>Loading initial content...</p>
    </div>
</div>

<script>
    const contentDiv = document.getElementById('content');
    const userStatusDiv = document.getElementById('userStatus');
    const siteTitleBase = <%- JSON.stringify(siteTitle) %>;

    const routeToPartialMap = {
        '/': '/partials/home',
        '/home': '/partials/home',
        '/profile': '/partials/profile',
        '/login': '/partials/login',
        '/register': '/partials/register'
    };

    // --- UPDATED: Function to dynamically load and execute JS ---
    async function loadAndExecuteScript(scriptPath) {
        console.log(`Attempting to load script: ${scriptPath}`);
        try {
            const response = await fetch(scriptPath);

            // Check for 404 first
            if (response.status === 404) {
                console.log(`No associated script found (404): ${scriptPath}`);
                return; // Exit quietly if no script exists
            }

            // Check if response is OK AND content type is JavaScript
            const contentType = response.headers.get('content-type');
            if (response.ok && contentType && (contentType.includes('application/javascript') || contentType.includes('text/javascript')))
            {
                const scriptContent = await response.text();
                try {
                    // Option 1: Create script tag (safer than eval)
                    const scriptElement = document.createElement('script');
                    scriptElement.textContent = scriptContent;
                    document.body.appendChild(scriptElement);
                    document.body.removeChild(scriptElement); // Clean up DOM
                    console.log(`Successfully executed script: ${scriptPath}`);

                    // Option 2: Direct eval (less safe, but simpler if Option 1 fails)
                    // eval(scriptContent);
                    // console.log(`Successfully executed script via eval: ${scriptPath}`);

                } catch (execError) {
                    // Catch errors during script execution (e.g., syntax errors in the loaded script)
                    console.error(`Error executing script ${scriptPath}:`, execError);
                }
            } else if (response.ok) {
                // Received a 200 OK response, but it's NOT JavaScript (likely HTML from catch-all)
                console.log(`Received non-JS content (likely HTML) when fetching script: ${scriptPath}. Content-Type: ${contentType}`);
                // Treat this as "script not found" or handle as error if needed
            }
            else {
                // Handle other non-OK statuses (500, etc.)
                console.error(`Error fetching script ${scriptPath}: ${response.status} ${response.statusText}`);
            }
        } catch (err) {
            // Handle network errors for the script fetch itself
            console.error(`Network error loading script ${scriptPath}:`, err);
        }
    }
    // --- End UPDATED function ---


    async function loadPartial(browserUrl, fetchUrl, isPopState = false) {
        console.log(`Requesting state: ${browserUrl}, Fetching: ${fetchUrl}, IsPopState: ${isPopState}`);
        contentDiv.innerHTML = '<p class="text-gray-500">Loading...</p>';
        contentDiv.classList.add('loading');
        const effectiveFetchUrl = fetchUrl;

        try {
            const res = await fetch(effectiveFetchUrl); // Fetch HTML

            if (res.ok) {
                const html = await res.text();
                contentDiv.innerHTML = html;
                console.log(`Successfully loaded partial HTML: ${fetchUrl}`);

                // Attempt to load corresponding JS
                const partialName = fetchUrl.substring(fetchUrl.lastIndexOf('/') + 1);
                if (partialName) {
                    const scriptPath = `/js/partials/${partialName}.js`;
                    // Intentionally *not* blocking loadPartial with await here,
                    // let the script load and execute asynchronously.
                    loadAndExecuteScript(scriptPath);
                }

                const pageTitle = `${siteTitleBase} - ${browserUrl.substring(1) || 'Home'}`;
                document.title = pageTitle;

                if (!isPopState) {
                    const state = { fetchUrl: fetchUrl, browserUrl: browserUrl };
                    history.pushState(state, pageTitle, browserUrl);
                    console.log('Pushed state:', state);
                }

            } else if (res.status === 401) {
                console.warn(`Authentication required for ${effectiveFetchUrl}. Loading login partial.`);
                await loadPartial('/login', '/partials/login', isPopState);

            } else {
                contentDiv.innerHTML = `<p class="text-red-500">Error loading content: ${res.status} ${res.statusText}</p>`;
                console.error(`Error loading partial ${effectiveFetchUrl}:`, res.status, res.statusText);
                document.title = `${siteTitleBase} - Error`;
            }
        } catch (err) {
            contentDiv.innerHTML = '<p class="text-red-500">Network error or server unavailable.</p>';
            console.error('Fetch error:', err);
            document.title = `${siteTitleBase} - Network Error`;
        } finally {
            contentDiv.classList.remove('loading');
        }
    }

    // Event Listeners (DOMContentLoaded, popstate)
    document.addEventListener('DOMContentLoaded', () => { /* ... same as before ... */ });
    window.addEventListener('popstate', (event) => { /* ... same as before ... */ });

</script>
</body>
</html>