<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title><%= siteTitle %></title>
    <link href="/css/output.css" rel="stylesheet">
    <style>
        #content { transition: opacity 0.3s ease-in-out; }
        #content.loading { opacity: 0.5; }
    </style>
</head>
<body class="bg-gray-200">
<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4"><%= siteTitle %></h1>

    <div id="userStatus" class="mb-2 text-sm text-gray-600">
        <%# Initial rendering is still done by EJS %>
        <% if (currentUser) { %>
            Welcome, <span class="font-semibold"><%= currentUser.username %></span>!
        <% } else { %>
            You are not logged in.
        <% } %>
    </div>

    <nav class="mb-4 space-x-2">
        <button
                onclick="loadPartial('/home', '/partials/home')"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
            Home
        </button>
        <button
                onclick="loadPartial('/profile', '/partials/profile')"
                class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
        >
            Profile (Need Auth)
        </button>
        <button
                onclick="loadPartial('/profile', '/partials/profile?authenticated=true')"
                class="bg-teal-500 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded"
        >
            Profile (Simulate Auth)
        </button>
        <button
                onclick="loadPartial('/login', '/partials/login')"
                class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
        >
            Login View
        </button>
        <button
                onclick="simulateLogout()"
                class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
        >
            Simulate Logout
        </button>
    </nav>

    <div id="content" class="bg-white p-6 rounded shadow-md min-h-[200px]">
        <p>Loading initial content...</p>
    </div>
</div>

<script>
    const contentDiv = document.getElementById('content');
    const userStatusDiv = document.getElementById('userStatus'); // Get the status div
    let clientIsAuthenticated = <%- !!currentUser %>;
    const siteTitleBase = <%- JSON.stringify(siteTitle) %>;

    const routeToPartialMap = {
        '/': '/partials/home',
        '/home': '/partials/home',
        '/profile': '/partials/profile',
        '/login': '/partials/login'
    };

    // --- NEW: Function to update the user status display ---
    function updateUserStatusDisplay() {
        if (!userStatusDiv) return;

        if (clientIsAuthenticated) {
            // For simulation, use a fixed username when authenticated client-side
            const username = 'DemoUser';
            userStatusDiv.innerHTML = `Welcome, <span class="font-semibold">${username}</span>!`;
        } else {
            userStatusDiv.innerHTML = 'You are not logged in.';
        }
        console.log(`Updated user status display. clientIsAuthenticated: ${clientIsAuthenticated}`);
    }
    // --- End NEW function ---

    async function loadPartial(browserUrl, fetchUrl, isPopState = false) {
        console.log(`Requesting state: ${browserUrl}, Fetching: ${fetchUrl}, IsPopState: ${isPopState}`);
        contentDiv.innerHTML = '<p class="text-gray-500">Loading...</p>';
        contentDiv.classList.add('loading');

        // Determine the fetch URL based on client state for profile route
        let effectiveFetchUrl = fetchUrl;
        if (fetchUrl.startsWith('/partials/profile')) {
            effectiveFetchUrl = clientIsAuthenticated
                ? (fetchUrl.includes('?') ? `${fetchUrl}&authenticated=true` : `${fetchUrl}?authenticated=true`)
                : fetchUrl.replace(/\?authenticated=true|&authenticated=true/, ''); // Remove auth param if not authed
            console.log(`Adjusted fetch URL based on client auth state: ${effectiveFetchUrl}`);
        }


        try {
            const res = await fetch(effectiveFetchUrl);

            if (res.ok) {
                const html = await res.text();
                contentDiv.innerHTML = html;
                const pageTitle = `${siteTitleBase} - ${browserUrl.substring(1) || 'Home'}`;
                document.title = pageTitle;

                // Detect if this successful load implies authentication
                // More robust check: ideally the server confirms auth status in response
                if (fetchUrl.includes('authenticated=true') || browserUrl === '/profile') {
                    // If we successfully loaded profile, or simulated login, set client auth state
                    if (!clientIsAuthenticated) { // Only update if state changed
                        clientIsAuthenticated = true;
                        updateUserStatusDisplay(); // <-- Update display on auth success
                    }
                }

                if (!isPopState) {
                    const state = { fetchUrl: fetchUrl, browserUrl: browserUrl };
                    history.pushState(state, pageTitle, browserUrl);
                    console.log('Pushed state:', state);
                }
                console.log(`Successfully loaded partial for: ${browserUrl}`);

            } else if (res.status === 401) {
                console.warn(`Authentication required for ${effectiveFetchUrl}. Loading login partial.`);
                if (clientIsAuthenticated) { // Only update if state changed
                    clientIsAuthenticated = false;
                    updateUserStatusDisplay(); // <-- Update display on auth failure (401)
                }
                await loadPartial('/login', '/partials/login', isPopState);

            } else {
                // Handle other errors
                contentDiv.innerHTML = `<p class="text-red-500">Error loading content: ${res.status} ${res.statusText}</p>`;
                console.error(`Error loading partial ${effectiveFetchUrl}:`, res.status, res.statusText);
                document.title = `${siteTitleBase} - Error`;
                // Should we reset auth state on other errors? Maybe not.
                // updateUserStatusDisplay(); // Update display to reflect current clientIsAuthenticated
            }
        } catch (err) {
            contentDiv.innerHTML = '<p class="text-red-500">Network error or server unavailable.</p>';
            console.error('Fetch error:', err);
            document.title = `${siteTitleBase} - Network Error`;
        } finally {
            contentDiv.classList.remove('loading');
        }
    }

    // --- NEW: Function for simulated logout ---
    function simulateLogout() {
        if (clientIsAuthenticated) {
            clientIsAuthenticated = false;
            updateUserStatusDisplay(); // Update display
            console.log('Simulated logout.');
            // Optionally navigate to home or login page
            loadPartial('/home', '/partials/home');
        }
    }

    // --- Event Listeners ---
    document.addEventListener('DOMContentLoaded', () => {
        const initialPath = window.location.pathname;
        const fetchUrl = routeToPartialMap[initialPath] || routeToPartialMap['/'];
        console.log(`Initial load path: ${initialPath}, mapped to fetch: ${fetchUrl}`);

        // Set initial client state based on server render
        clientIsAuthenticated = <%- !!currentUser %>;
        updateUserStatusDisplay(); // <-- Call initially to set JS-controlled display

        loadPartial(initialPath, fetchUrl, true);

        const initialState = { fetchUrl: fetchUrl, browserUrl: initialPath };
        history.replaceState(initialState, document.title, initialPath);
        console.log('Replaced initial state:', initialState);
    });

    window.addEventListener('popstate', (event) => {
        console.log('Popstate event fired. State:', event.state);
        if (event.state && event.state.fetchUrl) {
            // Determine auth state based on the URL we are going back/forward TO
            if (event.state.browserUrl === '/profile' && !event.state.fetchUrl.includes('authenticated=true')) {
                // This state represents an attempt to load profile without auth
                clientIsAuthenticated = false;
            } else if (event.state.fetchUrl.includes('authenticated=true')) {
                // This state represents an authenticated view
                clientIsAuthenticated = true;
            }
            // Update display based on the state we are navigating to
            updateUserStatusDisplay();
            loadPartial(event.state.browserUrl, event.state.fetchUrl, true);
        } else {
            console.log("Popstate event with null/invalid state, loading default.");
            clientIsAuthenticated = false; // Assume logged out for root/unknown state
            updateUserStatusDisplay();
            loadPartial('/home', '/partials/home', true);
        }
    });

</script>
</body>
</html>